name: CI/CD Pipeline

on:
  push:
    branches:
      - master

env:
  TF_DIR: terraform
  ANSIBLE_DIR: ansible
  PYTHON_DIR: app

jobs:
  test:
    name: Run Unit Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: |
          export PYTHONPATH=/app
          pytest


  terraform:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: test

    env:

      ARM_CLIENT_ID: ${{ secrets.TF_VAR_client_id }}
      ARM_CLIENT_SECRET: ${{ secrets.TF_VAR_client_secret }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.TF_VAR_subscription_id }}
      ARM_TENANT_ID: ${{ secrets.TF_VAR_tenant_id }}

      TF_VAR_client_id: ${{ secrets.TF_VAR_client_id }}
      TF_VAR_client_secret: ${{ secrets.TF_VAR_client_secret }}
      TF_VAR_subscription_id: ${{ secrets.TF_VAR_subscription_id }}
      TF_VAR_tenant_id: ${{ secrets.TF_VAR_tenant_id }}

      TF_VAR_ssh_public_key: ${{ secrets.TF_VAR_ssh_public_key }}
      TF_VAR_sql_password: ${{ secrets.TF_VAR_sql_password }}
      TF_VAR_openai_key: ${{ secrets.TF_VAR_openai_key }}

      TF_VAR_admin_username: ${{ vars.TF_VAR_admin_username}}
      TF_VAR_sql_admin: ${{ vars.TF_VAR_sql_admin}}
      TF_VAR_location: ${{ vars.TF_VAR_location}}
      TF_VAR_resource_group_name: ${{ vars.TF_VAR_resource_group_name}}
      

    outputs:
      bastion_ip: ${{ steps.output.outputs.bastion_ip }}
      app_vm_ips: ${{ steps.output.outputs.app_vm_ips }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init & Apply
        run: |
          cd $TF_DIR
          terraform init
          terraform apply -auto-approve

      - name: Output Bastion IP
        id: output
        run: |
          echo "bastion_ip=$(cd $TF_DIR && terraform output -raw bastion_ip)" >> $GITHUB_OUTPUT
          echo "app_vm_ips=$(cd $TF_DIR && terraform output -json app_vm_ips)" >> $GITHUB_OUTPUT
          # echo "sqlalchemy_connection_string=$(cd $TF_DIR && terraform output -raw sqlalchemy_connection_string)" >> $GITHUB_OUTPUT"
          # echo "azure_blob_connection_string=$(cd $TF_DIR && terraform output -raw azure_blob_connection_string)" >> $GITHUB_OUTPUT"
          # echo "storage_container_name=$(cd $TF_DIR && terraform output -raw storage_container_name)" >> $GITHUB_OUTPUT"

      - name: Verify .env exists
        run: |
          echo "Current dir: $(pwd)"
          ls -alh 

      - name: Upload .env as artifact
        uses: actions/upload-artifact@v4
        with:
          name: env
          path: env.txt

      # - name: Generate .env from Terraform outputs
      #   run: |
      #     mkdir -p $GITHUB_WORKSPACE/env_output
      #     cd $TF_DIR
      #     terraform output -raw sql_env_vars > $GITHUB_WORKSPACE/env_output/.env
      #     terraform output -raw blob_env_vars >> $GITHUB_WORKSPACE/env_output/.env

      # - name: Verify .env exists
      #   run: |
      #     echo "Current dir: $(pwd)"
      #     ls -alh $GITHUB_WORKSPACE/env_output

      # - name: Upload .env artifact
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: env
      #     path: ${{ github.workspace }}/env_output





  ansible:
    name: Configure VMs with Ansible via Bastion
    runs-on: ubuntu-latest
    needs: terraform

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install SSH key for Bastion
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Download .env artifact
        uses: actions/download-artifact@v4
        with:
          name: env
          path: ./

      - name: debug:show files before Ansible runs
        run: |
          echo "Current directory: $(pwd)"
          find . -type f -name "env.txt"

      - name: Confirm .env exists
        run: |
          tree

      - name: SSH to Bastion and run Ansible
        env:
          SSH_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          echo "Debug: APP_VM_IPS=${{ needs.terraform.outputs.app_vm_ips }}"

          echo "[webservers]" > inventory.ini
          echo "${{ needs.terraform.outputs.app_vm_ips }}" | jq -r '.[]' | while read ip; do
            echo "$ip ansible_user=azureuser ansible_ssh_private_key_file=~/.ssh/id_rsa" >> inventory.ini
          done

          echo "--- Generated inventory.ini ---"
          cat inventory.ini

          echo "${SSH_KEY}" > id_rsa
          chmod 600 id_rsa

          tree

          scp -o StrictHostKeyChecking=no -i id_rsa inventory.ini azureuser@${{ needs.terraform.outputs.bastion_ip }}:/home/azureuser
          scp -o StrictHostKeyChecking=no -i id_rsa id_rsa azureuser@${{ needs.terraform.outputs.bastion_ip }}:/home/azureuser/.ssh/id_rsa
          scp -o StrictHostKeyChecking=no -i id_rsa env.txt azureuser@${{ needs.terraform.outputs.bastion_ip }}:/home/azureuser


          # Escape properly and SSH to bastion
          ssh -o StrictHostKeyChecking=no azureuser@${{ needs.terraform.outputs.bastion_ip }} <<EOF
            sudo apt update && sudo apt install -y ansible git

            rm -rf repo && git clone https://github.com/Buschhen/CC2.git repo

            mv inventory.ini ./repo/ansible/
            mv env.txt ./repo/ansible/.env
            cd repo/ansible


            ls -la

            echo -e "[defaults]\nhost_key_checking = False" > ansible.cfg
            chmod 600 ~/.ssh/id_rsa
            echo "--- Generated inventory.ini ---"
            cat inventory.ini

            ansible-playbook -i inventory.ini deployment.yml
          EOF
